{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "ArcBehaviors",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "payload-parser-behavior.html",
        "start": {
          "line": 23,
          "column": 2
        },
        "end": {
          "line": 23,
          "column": 27
        }
      },
      "mixins": [
        {
          "description": "A behavior to be implemented to elements that needs to parse\nrequest / response body.\nIt contains functions to encode / decode form data and to escape HTML.",
          "summary": "",
          "path": "payload-parser-behavior.html",
          "properties": [
            {
              "name": "AMP_RE",
              "type": "RegExp | null | undefined",
              "description": "Regexp to search for the `&` character",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 49,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "RegExp"
                }
              }
            },
            {
              "name": "GT_RE",
              "type": "RegExp | null | undefined",
              "description": "Regexp to search for the `>` character",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 8
                },
                "end": {
                  "line": 57,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "RegExp"
                }
              }
            },
            {
              "name": "LT_RE",
              "type": "RegExp | null | undefined",
              "description": "Regexp to search for the `<` character",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 8
                },
                "end": {
                  "line": 65,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "RegExp"
                }
              }
            },
            {
              "name": "SQUOT_RE",
              "type": "RegExp | null | undefined",
              "description": "Regexp to search for the `'` character",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "RegExp"
                }
              }
            },
            {
              "name": "QUOT_RE",
              "type": "RegExp | null | undefined",
              "description": "Regexp to search for the `\"` character",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "RegExp"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "htmlEscape",
              "description": "Escape HTML to save HTML text.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 108,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "html",
                  "type": "String",
                  "description": "A HTML string to be escaped."
                }
              ],
              "return": {
                "type": "String"
              }
            },
            {
              "name": "formArrayToString",
              "description": "Parse input array to string x-www-form-urlencoded.\n\nNote that this function doesn't encodes the name and value. Use\n`this.formArrayToString(this.encodeUrlEncoded(arr))`\nto create a encoded string from the array.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 120,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "arr",
                  "type": "Array.<Object>",
                  "description": "Input array. Each element must contain an\nobject with `name` and `value` keys."
                }
              ],
              "return": {
                "type": "String",
                "desc": "A parsed string of `name`=`value` pairs of the input objects."
              }
            },
            {
              "name": "_modelItemToFormDataString",
              "description": "Creates a form data string for a single item.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 138,
                  "column": 4
                },
                "end": {
                  "line": 156,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Object",
                  "description": "The model with `name` and `value` properties."
                }
              ],
              "return": {
                "type": "String",
                "desc": "Generated value string for x-www-form-urlencoded form."
              }
            },
            {
              "name": "stringToArray",
              "description": "Parse input string to array of x-www-form-urlencoded form parameters.\n\nThis function will not url-decode names and values. Please, use\n`this.decodeUrlEncoded(this.stringToArray(str))` to create an array\nof decoded parameters.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 167,
                  "column": 4
                },
                "end": {
                  "line": 181,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "input",
                  "type": "String",
                  "description": "A string of HTTP x-www-form-urlencoded parameters"
                }
              ],
              "return": {
                "type": "Array.<Object>",
                "desc": "An array of params with `name` and `value` keys."
              }
            },
            {
              "name": "_createParamsArray",
              "description": "Converts a string to an array with objects containing name and value keys",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 187,
                  "column": 4
                },
                "end": {
                  "line": 224,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "input",
                  "type": "String",
                  "description": "An input string"
                }
              ],
              "return": {
                "type": "Array.<Object>",
                "desc": "An array of params with `name` and `value` keys."
              }
            },
            {
              "name": "_appendArrayResult",
              "description": "Appends form data parameter to an array.\nIf the parameter already exists in the array it creates an array for\nthe value onstead of appending the same parameter.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 235,
                  "column": 4
                },
                "end": {
                  "line": 251,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "array",
                  "type": "Array",
                  "description": "An array to append the parameter"
                },
                {
                  "name": "name",
                  "type": "String",
                  "description": "Name of the form data parameter"
                },
                {
                  "name": "value",
                  "type": "String",
                  "description": "Value of the form data parameter"
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Updated array"
              }
            },
            {
              "name": "encodeUrlEncoded",
              "description": "Encode payload to x-www-form-urlencoded string.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 258,
                  "column": 4
                },
                "end": {
                  "line": 274,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "input",
                  "type": "(Array.<object> | String)",
                  "description": "An input data."
                }
              ],
              "return": {
                "type": "(Array.<object> | String)"
              }
            },
            {
              "name": "_encodeValue",
              "description": "URL encodes a value.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 282,
                  "column": 4
                },
                "end": {
                  "line": 290,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "(String | Array.<String>)",
                  "description": "Value to encode. Either string or\narray of strings."
                }
              ],
              "return": {
                "type": "(String | Array.<String>)",
                "desc": "Encoded value. The same type as the input."
              }
            },
            {
              "name": "decodeUrlEncoded",
              "description": "Decode x-www-form-urlencoded data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 297,
                  "column": 4
                },
                "end": {
                  "line": 313,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "input",
                  "type": "(Array.<object> | String)",
                  "description": "An input data."
                }
              ],
              "return": {
                "type": "(Array.<object> | String)"
              }
            },
            {
              "name": "_decodeValue",
              "description": "URL decodes a value.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 321,
                  "column": 4
                },
                "end": {
                  "line": 329,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "(String | Array.<String>)",
                  "description": "Value to decode. Either string or\narray of strings."
                }
              ],
              "return": {
                "type": "(String | Array.<String>)",
                "desc": "Decoded value. The same type as the input."
              }
            },
            {
              "name": "_paramValue",
              "description": "Parse input string as a payload param key or value.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 336,
                  "column": 4
                },
                "end": {
                  "line": 343,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "input",
                  "type": "String",
                  "description": "An input to parse."
                }
              ],
              "return": {
                "type": "String"
              }
            },
            {
              "name": "_paramLineToFormObject",
              "description": "Parse a line of key=value http params into an object with `name` and `value` keys.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 351,
                  "column": 4
                },
                "end": {
                  "line": 370,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "input",
                  "type": "String",
                  "description": "A input line of x-www-form-urlencoded text tike `param=value`"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "A parsed object with `name` and `value` keys."
              }
            },
            {
              "name": "encodeQueryString",
              "description": "Returns a string where all characters that are not valid for a URL\ncomponent have been escaped. The escaping of a character is done by\nconverting it into its UTF-8 encoding and then encoding each of the\nresulting bytes as a %xx hexadecimal escape sequence.\n\nNote: this method will convert any space character into its escape\nshort form, '+' rather than %20. It should therefore only be used for\nquery-string parts.\n\nThe following character sets are **not** escaped by this method:\n- ASCII digits or letters\n- ASCII punctuation characters: ```- _ . ! ~ * ' ( )</pre>```\n\nNotice that this method <em>does</em> encode the URL component delimiter\ncharacters:<blockquote>\n\n```\n; / ? : & = + $ , #\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 395,
                  "column": 4
                },
                "end": {
                  "line": 401,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "str",
                  "type": "String",
                  "description": "A string containing invalid URL characters"
                }
              ],
              "return": {
                "type": "String",
                "desc": "a string with all invalid URL characters escaped"
              }
            },
            {
              "name": "decodeQueryString",
              "description": "Returns a string where all URL component escape sequences have been\nconverted back to their original character representations.\n\nNote: this method will convert the space character escape short form, '+',\ninto a space. It should therefore only be used for query-string parts.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 412,
                  "column": 4
                },
                "end": {
                  "line": 418,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "str",
                  "type": "String",
                  "description": "string containing encoded URL component sequences"
                }
              ],
              "return": {
                "type": "String",
                "desc": "string with no encoded URL component encoded sequences"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 421,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "ArcBehaviors.PayloadParserBehavior",
          "attributes": [],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  ]
}
